{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "My FirstCare Opera Panel API - Complete CRUD",
		"description": "Comprehensive API collection for My FirstCare Opera Panel with full CRUD operations for all entities",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-login if no token exists",
					"if (!pm.environment.get('jwt_token')) {",
					"    pm.sendRequest({",
					"        url: pm.environment.get('base_url') + '/auth/login',",
					"        method: 'POST',",
					"        header: {'Content-Type': 'application/json'},",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({",
					"                username: pm.environment.get('username'),",
					"                password: pm.environment.get('password')",
					"            })",
					"        }",
					"    }, function (err, response) {",
					"        if (err) {",
					"            console.log('Login request failed:', err);",
					"            return;",
					"        }",
					"        if (response && response.code === 200) {",
					"            try {",
					"                const jsonData = response.json();",
					"                if (jsonData && jsonData.access_token) {",
					"                    pm.environment.set('jwt_token', jsonData.access_token);",
					"                    console.log('JWT token set successfully');",
					"                } else {",
					"                    console.log('No access_token in response');",
					"                }",
					"            } catch (e) {",
					"                console.log('Error parsing login response:', e);",
					"            }",
					"        } else {",
					"            console.log('Login failed with status:', response ? response.code : 'undefined response');",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.environment.set('jwt_token', jsonData.access_token);",
									"    pm.environment.set('user_id', jsonData.user_id);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					}
				},
				{
					"name": "Refresh Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					}
				}
			]
		},
		{
			"name": "Patients - CRUD",
			"item": [
				{
					"name": "Get All Patients",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/patients?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "hospital_id",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Patient by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/patients/{{patient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients",
								"{{patient_id}}"
							]
						}
					}
				},
				{
					"name": "Create Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('patient_id', jsonData.patient_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"nickname\": \"Johnny\",\n    \"gender\": \"male\",\n    \"birth_date\": \"1990-01-01T00:00:00Z\",\n    \"id_card\": \"1234567890123\",\n    \"phone\": \"0812345678\",\n    \"email\": \"john.doe@example.com\",\n    \"address\": \"123 Test Street\",\n    \"province_code\": \"10\",\n    \"district_code\": \"1001\",\n    \"sub_district_code\": \"100101\",\n    \"postal_code\": \"10110\",\n    \"blood_type\": \"O+\",\n    \"height\": 175.5,\n    \"weight\": 70.0,\n    \"bmi\": 22.8,\n    \"new_hospital_ids\": [\"{{hospital_id}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/patients",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients"
							]
						}
					}
				},
				{
					"name": "Update Patient",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John Updated\",\n    \"phone\": \"0898765432\",\n    \"weight\": 72.0,\n    \"bmi\": 23.5\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/patients/{{patient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients",
								"{{patient_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Patient",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/patients/{{patient_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients",
								"{{patient_id}}"
							]
						}
					}
				},
				{
					"name": "Get Raw Patient Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Raw patient documents retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('raw_documents');",
									"    pm.expect(jsonData.data).to.have.property('field_analysis');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    console.log('Total patient documents:', jsonData.data.total_count);",
									"    console.log('Returned documents:', jsonData.data.returned_count);",
									"    console.log('Field analysis for', Object.keys(jsonData.data.field_analysis).length, 'fields');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/patients-raw-documents?limit=5&skip=0&include_deleted=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"patients-raw-documents"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Number of raw documents to return (1-50)"
								},
								{
									"key": "skip",
									"value": "0",
									"description": "Number of documents to skip"
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true,
									"description": "Filter by specific patient ID"
								},
								{
									"key": "include_deleted",
									"value": "false",
									"description": "Include soft-deleted patients"
								}
							]
						}
					}
				},
				{
					"name": "Get Raw Hospital Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Raw hospital documents retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('raw_documents');",
									"    pm.expect(jsonData.data).to.have.property('field_analysis');",
									"    pm.expect(jsonData.data).to.have.property('total_count');",
									"    console.log('Total hospital documents:', jsonData.data.total_count);",
									"    console.log('Returned documents:', jsonData.data.returned_count);",
									"    console.log('Field analysis for', Object.keys(jsonData.data.field_analysis).length, 'fields');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hospitals-raw-documents?limit=5&skip=0&include_deleted=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospitals-raw-documents"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Number of raw documents to return (1-50)"
								},
								{
									"key": "skip",
									"value": "0",
									"description": "Number of documents to skip"
								},
								{
									"key": "hospital_id",
									"value": "",
									"disabled": true,
									"description": "Filter by specific hospital ID"
								},
								{
									"key": "province_code",
									"value": "",
									"disabled": true,
									"description": "Filter by province code"
								},
								{
									"key": "district_code",
									"value": "",
									"disabled": true,
									"description": "Filter by district code"
								},
								{
									"key": "include_deleted",
									"value": "false",
									"description": "Include soft-deleted hospitals"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Devices - CRUD",
			"item": [
				{
					"name": "Get All Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "device_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "hospital_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Device by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices/{{device_id}}?device_type=ava4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"{{device_id}}"
							],
							"query": [
								{
									"key": "device_type",
									"value": "ava4"
								}
							]
						}
					}
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('device_id', jsonData.device_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"device_type\": \"ava4\",\n    \"mac_address\": \"AA:BB:CC:DD:EE:FF\",\n    \"serial_number\": \"AVA4-2024-001\",\n    \"model\": \"AVA4-Pro\",\n    \"firmware_version\": \"1.2.3\",\n    \"hospital_id\": \"{{hospital_id}}\",\n    \"patient_id\": \"{{patient_id}}\",\n    \"location\": \"Room 101\",\n    \"status\": \"active\",\n    \"configuration\": {\n        \"measurement_interval\": 300,\n        \"auto_sync\": true,\n        \"alerts_enabled\": true\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/devices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices"
							]
						}
					}
				},
				{
					"name": "Update Device",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firmware_version\": \"1.2.4\",\n    \"location\": \"Room 102\",\n    \"status\": \"active\",\n    \"configuration\": {\n        \"measurement_interval\": 600,\n        \"auto_sync\": true,\n        \"alerts_enabled\": false\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/devices/{{device_id}}?device_type=ava4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"{{device_id}}"
							],
							"query": [
								{
									"key": "device_type",
									"value": "ava4"
								}
							]
						}
					}
				},
				{
					"name": "Delete Device",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices/{{device_id}}?device_type=ava4",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"{{device_id}}"
							],
							"query": [
								{
									"key": "device_type",
									"value": "ava4"
								}
							]
						}
					}
				},
				{
					"name": "Get AVA4 Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/devices?device_type=ava4&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"devices"
							],
							"query": [
								{
									"key": "device_type",
									"value": "ava4"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Kati Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/devices?device_type=kati&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"devices"
							],
							"query": [
								{
									"key": "device_type",
									"value": "kati"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Qube-Vital Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/devices?device_type=qube-vital&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"devices"
							],
							"query": [
								{
									"key": "device_type",
									"value": "qube-vital"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Device Data - CRUD",
			"item": [
				{
					"name": "Get Device Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices/data?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"data"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "device_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "device_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "data_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Device Data Record",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices/data/{{observation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"data",
								"{{observation_id}}"
							]
						}
					}
				},
				{
					"name": "Create Device Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('observation_id', jsonData.observation_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"device_id\": \"AA:BB:CC:DD:EE:FF\",\n    \"device_type\": \"ava4\",\n    \"data_type\": \"blood_pressure\",\n    \"values\": {\n        \"systolic\": 120,\n        \"diastolic\": 80,\n        \"pulse\": 72,\n        \"value\": 120,\n        \"unit\": \"mmHg\",\n        \"unit_code\": \"mm[Hg]\"\n    },\n    \"patient_id\": \"{{patient_id}}\",\n    \"notes\": \"Morning measurement\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/devices/data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"data"
							]
						}
					}
				},
				{
					"name": "Update Device Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"values\": {\n        \"systolic\": 125,\n        \"diastolic\": 82,\n        \"pulse\": 75,\n        \"value\": 125,\n        \"unit\": \"mmHg\",\n        \"unit_code\": \"mm[Hg]\"\n    },\n    \"notes\": \"Corrected measurement\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/devices/data/{{observation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"data",
								"{{observation_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Device Data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/devices/data/{{observation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"devices",
								"data",
								"{{observation_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Medical History - CRUD",
			"item": [
				{
					"name": "Get Medical History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/blood_pressure?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"blood_pressure"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Medical History Record",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/blood_pressure/{{record_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"blood_pressure",
								"{{record_id}}"
							]
						}
					}
				},
				{
					"name": "Create Medical History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('record_id', jsonData.record_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"patient_id\": \"{{patient_id}}\",\n    \"history_type\": \"blood_pressure\",\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"device_id\": \"{{device_id}}\",\n    \"values\": {\n        \"systolic\": 120,\n        \"diastolic\": 80,\n        \"pulse\": 72,\n        \"measurement_time\": \"2024-01-15T10:30:00Z\"\n    },\n    \"notes\": \"Manual entry\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/medical-history",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history"
							]
						}
					}
				},
				{
					"name": "Update Medical History",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"values\": {\n        \"systolic\": 125,\n        \"diastolic\": 82,\n        \"pulse\": 75,\n        \"measurement_time\": \"2024-01-15T10:30:00Z\"\n    },\n    \"notes\": \"Updated measurement\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/medical-history/blood_pressure/{{record_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"blood_pressure",
								"{{record_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Medical History",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/blood_pressure/{{record_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"blood_pressure",
								"{{record_id}}"
							]
						}
					}
				},
				{
					"name": "Get Blood Sugar History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/blood_sugar?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"blood_sugar"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Temperature History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/temperature?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"temperature"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Step History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/medical-history/step?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"medical-history",
								"step"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Hospital Users - CRUD",
			"item": [
				{
					"name": "Get All Hospital Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('total');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hospital-users?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "hospital_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_active",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Hospital User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hospital-users/{{hospital_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users",
								"{{hospital_user_id}}"
							]
						}
					}
				},
				{
					"name": "Create Hospital User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Hospital user created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('user_id');",
									"    pm.environment.set('hospital_user_id', jsonData.data.user_id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test.user@hospital.com\",\n    \"password\": \"SecurePass123!\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"user_title\": \"Dr.\",\n    \"phone\": \"0123456789\",\n    \"country_phone_code\": \"+66\",\n    \"country_code\": \"TH\",\n    \"country_name\": \"Thailand\",\n    \"hospital_id\": \"6241716c2420fcbc3cab2c77\",\n    \"type\": \"663224739f05965bd5b7745e\",\n    \"image_url\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/hospital-users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users"
							]
						}
					}
				},
				{
					"name": "Update Hospital User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hospital user updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated Test\",\n    \"last_name\": \"User Updated\",\n    \"phone\": \"0987654321\",\n    \"user_title\": \"Prof.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/hospital-users/{{hospital_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users",
								"{{hospital_user_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Hospital User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Hospital user deleted successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hospital-users/{{hospital_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users",
								"{{hospital_user_id}}"
							]
						}
					}
				},
				{
					"name": "Search Hospital Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Search completed successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    pm.expect(jsonData.data).to.have.property('search_criteria');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"search\": \"test\",\n    \"hospital_id\": null,\n    \"type\": null,\n    \"email\": null,\n    \"first_name\": null,\n    \"last_name\": null,\n    \"phone\": null,\n    \"is_active\": true,\n    \"is_deleted\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/hospital-users/search?limit=20&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users",
								"search"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "skip",
									"value": "0"
								}
							]
						}
					}
				},
				{
					"name": "Get Hospital Users Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Statistics retrieved successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('total_users');",
									"    pm.expect(jsonData.data).to.have.property('users_by_hospital');",
									"    pm.expect(jsonData.data).to.have.property('users_by_type');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/hospital-users/stats/summary",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"hospital-users",
								"stats",
								"summary"
							]
						}
					}
				}
			]
		},
		{
			"name": "Master Data - CRUD",
			"item": [
				{
					"name": "Get All Hospitals",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospitals?limit=20&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospitals"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "province_code",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": [
						{
							"name": "Hospitals with Enhanced Address Data",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/admin/master-data/hospitals?limit=1",
									"host": ["{{base_url}}"],
									"path": ["admin", "master-data", "hospitals"],
									"query": [{"key": "limit", "value": "1"}]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [{"key": "Content-Type", "value": "application/json"}],
							"cookie": [],
							"body": "{\"success\":true,\"message\":\"Master data retrieved successfully\",\"data\":{\"data\":[{\"_id\":\"507f1f77bcf86cd799439011\",\"name\":[{\"code\":\"en\",\"name\":\"Siriraj Hospital\"},{\"code\":\"th\",\"name\":\"โรงพยาบาลศิริราช\"}],\"en_name\":\"Siriraj Hospital\",\"province_code\":10,\"district_code\":1008,\"sub_district_code\":100801,\"organizecode\":2001,\"hospital_area_code\":\"10700\",\"is_active\":true,\"is_deleted\":false,\"address\":\"2 Wanglang Road, Bangkoknoi, Bangkok 10700\",\"address_details\":{\"street_address\":\"2 Wanglang Road\",\"building_name\":\"Siriraj Hospital Complex\",\"floor\":\"Multiple Buildings\",\"room\":\"Main Reception\",\"postal_code\":\"10700\",\"postal_box\":\"P.O. Box 2000\"},\"location\":{\"latitude\":13.7587,\"longitude\":100.4898,\"elevation\":3.2,\"precision\":\"GPS\"},\"contact\":{\"phone\":\"+66-2-419-7000\",\"phone_2\":\"+66-2-419-7001\",\"fax\":\"+66-2-419-7002\",\"mobile\":\"+66-82-419-7000\",\"emergency_phone\":\"+66-2-419-1911\",\"email\":\"info@siriraj.ac.th\",\"email_admin\":\"admin@siriraj.ac.th\",\"website\":\"https://www.siriraj.ac.th\"},\"services\":{\"bed_capacity\":2200,\"emergency_services\":true,\"trauma_center\":true,\"icu_beds\":180,\"operating_rooms\":45,\"service_plan_type\":\"A+\",\"accreditation\":\"JCI\"},\"phone\":\"+66-2-419-7000\",\"email\":\"info@siriraj.ac.th\",\"website\":\"https://www.siriraj.ac.th\",\"bed_capacity\":2200,\"service_plan_type\":\"A+\",\"image_url\":\"https://cdn.siriraj.ac.th/logo.png\",\"mac_hv01_box\":\"BB:CC:DD:EE:FF:AA\",\"created_at\":\"2024-01-10T08:00:00.000Z\",\"updated_at\":\"2024-01-15T09:15:00.000Z\"}],\"total\":12350,\"data_type\":\"hospitals\",\"limit\":1,\"skip\":0},\"request_id\":\"b2c3d4e5-f6g7-8901-bcde-234567890123\",\"timestamp\":\"2025-01-15T11:00:00.000Z\"}"
						}
					]
				},
				{
					"name": "Get Master Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospitals?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospitals"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "province_code",
									"value": "",
									"disabled": true
								},
								{
									"key": "district_code",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Master Data Record",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospitals/{{master_data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospitals",
								"{{master_data_id}}"
							]
						}
					}
				},
				{
					"name": "Create Master Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('master_data_id', jsonData.record_id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data_type\": \"hospitals\",\n    \"name\": [\n        {\"lang\": \"th\", \"name\": \"โรงพยาบาลทดสอบ\"},\n        {\"lang\": \"en\", \"name\": \"Test Hospital\"}\n    ],\n    \"code\": 9999,\n    \"is_active\": true,\n    \"province_code\": 10,\n    \"district_code\": 1001,\n    \"sub_district_code\": 100101,\n    \"additional_fields\": {\n        \"en_name\": \"Test Hospital\",\n        \"organizecode\": 9999,\n        \"hospital_area_code\": \"TEST\",\n        \"bed_capacity\": 100,\n        \"location\": [13.7563, 100.5018],\n        \"service_plan_type\": \"A\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/master-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data"
							]
						}
					}
				},
				{
					"name": "Update Master Data",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": [\n        {\"lang\": \"th\", \"name\": \"โรงพยาบาลทดสอบ (อัปเดต)\"},\n        {\"lang\": \"en\", \"name\": \"Test Hospital (Updated)\"}\n    ],\n    \"is_active\": true,\n    \"additional_fields\": {\n        \"bed_capacity\": 150,\n        \"service_plan_type\": \"F3\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospitals/{{master_data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospitals",
								"{{master_data_id}}"
							]
						}
					}
				},
				{
					"name": "Delete Master Data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospitals/{{master_data_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospitals",
								"{{master_data_id}}"
							]
						}
					}
				},
				{
					"name": "Get Provinces",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/provinces?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"provinces"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Districts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/districts?limit=50&province_code=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"districts"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "province_code",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Get Sub-Districts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/sub_districts?limit=50&province_code=10&district_code=1003",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"sub_districts"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "province_code",
									"value": "10"
								},
								{
									"key": "district_code",
									"value": "1003"
								}
							]
						}
					}
				},
				{
					"name": "Get Hospital Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/hospital_types?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"hospital_types"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Get Blood Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/blood_groups?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"blood_groups"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Human Skin Colors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/human_skin_colors?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"human_skin_colors"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0",
									"disabled": true
								}
							]
						}
					}
				},
				{
					"name": "Get Nations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/master-data/nations?limit=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"master-data",
								"nations"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "skip",
									"value": "0",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Geographic Dropdowns - Frontend Optimized",
			"item": [
				{
					"name": "Provinces Dropdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Provinces dropdown retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('provinces');",
									"    pm.expect(jsonData.data).to.have.property('total');",
									"    pm.expect(jsonData.data).to.have.property('filters_applied');",
									"    console.log('Provinces in dropdown:', jsonData.data.total);",
									"});",
									"",
									"pm.test('Province structure is optimized for dropdown', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.provinces && jsonData.data.provinces.length > 0) {",
									"        const province = jsonData.data.provinces[0];",
									"        pm.expect(province).to.have.property('code');",
									"        pm.expect(province).to.have.property('en_name');",
									"        pm.expect(province).to.have.property('th_name');",
									"        pm.expect(province).to.have.property('is_active');",
									"        console.log('Sample province:', province.en_name, '(' + province.th_name + ')');",
									"    }",
									"});",
									"",
									"pm.test('Filters applied correctly', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.filters_applied).to.have.property('include_inactive');",
									"    pm.expect(jsonData.data.filters_applied).to.have.property('include_deleted');",
									"    pm.expect(jsonData.data.filters_applied).to.have.property('search');",
									"    pm.expect(jsonData.data.filters_applied).to.have.property('limit');",
									"    pm.expect(jsonData.data.filters_applied).to.have.property('sort_by');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/dropdown/provinces?limit=10&sort_by=en_name",
							"host": ["{{base_url}}"],
							"path": ["admin", "dropdown", "provinces"],
							"query": [
								{"key": "limit", "value": "10", "description": "Limit results for dropdown"},
								{"key": "sort_by", "value": "en_name", "description": "Sort by English name"},
								{"key": "include_inactive", "value": "false", "disabled": true, "description": "Include inactive provinces"},
								{"key": "include_deleted", "value": "false", "disabled": true, "description": "Include deleted provinces"},
								{"key": "search", "value": "", "disabled": true, "description": "Search province names"}
							]
						}
					}
				},
				{
					"name": "Provinces Dropdown - With Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Province search works correctly', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('provinces');",
									"    pm.expect(jsonData.data.filters_applied.search).to.equal('Bangkok');",
									"    console.log('Search results for Bangkok:', jsonData.data.total);",
									"});",
									"",
									"pm.test('Search results contain Bangkok', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.provinces.length > 0) {",
									"        const bangkok = jsonData.data.provinces.find(p => ",
									"            p.en_name.toLowerCase().includes('bangkok') || p.th_name.includes('กรุงเทพ')",
									"        );",
									"        pm.expect(bangkok).to.not.be.undefined;",
									"        console.log('Bangkok found:', bangkok.en_name);",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/dropdown/provinces?search=Bangkok&limit=5",
							"host": ["{{base_url}}"],
							"path": ["admin", "dropdown", "provinces"],
							"query": [
								{"key": "search", "value": "Bangkok", "description": "Search for Bangkok"},
								{"key": "limit", "value": "5"},
								{"key": "sort_by", "value": "en_name", "disabled": true}
							]
						}
					}
				},
				{
					"name": "Districts Dropdown - Cascading",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Districts dropdown retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('districts');",
									"    pm.expect(jsonData.data).to.have.property('total');",
									"    pm.expect(jsonData.data).to.have.property('province_code');",
									"    pm.expect(jsonData.data).to.have.property('filters_applied');",
									"    console.log('Districts in Bangkok:', jsonData.data.total);",
									"});",
									"",
									"pm.test('District structure is optimized for dropdown', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.districts && jsonData.data.districts.length > 0) {",
									"        const district = jsonData.data.districts[0];",
									"        pm.expect(district).to.have.property('code');",
									"        pm.expect(district).to.have.property('en_name');",
									"        pm.expect(district).to.have.property('th_name');",
									"        pm.expect(district).to.have.property('is_active');",
									"        console.log('Sample district:', district.en_name, '(' + district.th_name + ')');",
									"    }",
									"});",
									"",
									"pm.test('Province code filter applied', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.province_code).to.equal(10);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/dropdown/districts?province_code=10&limit=20",
							"host": ["{{base_url}}"],
							"path": ["admin", "dropdown", "districts"],
							"query": [
								{"key": "province_code", "value": "10", "description": "Bangkok province code"},
								{"key": "limit", "value": "20", "description": "Limit results"},
								{"key": "sort_by", "value": "en_name", "disabled": true},
								{"key": "include_inactive", "value": "false", "disabled": true},
								{"key": "include_deleted", "value": "false", "disabled": true},
								{"key": "search", "value": "", "disabled": true}
							]
						}
					}
				},
				{
					"name": "Sub-Districts Dropdown - Full Cascading",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Sub-districts dropdown retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('sub_districts');",
									"    pm.expect(jsonData.data).to.have.property('total');",
									"    pm.expect(jsonData.data).to.have.property('province_code');",
									"    pm.expect(jsonData.data).to.have.property('district_code');",
									"    console.log('Sub-districts found:', jsonData.data.total);",
									"});",
									"",
									"pm.test('Sub-district structure is optimized for dropdown', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.sub_districts && jsonData.data.sub_districts.length > 0) {",
									"        const subDistrict = jsonData.data.sub_districts[0];",
									"        pm.expect(subDistrict).to.have.property('code');",
									"        pm.expect(subDistrict).to.have.property('en_name');",
									"        pm.expect(subDistrict).to.have.property('th_name');",
									"        console.log('Sample sub-district:', subDistrict.en_name, '(' + subDistrict.th_name + ')');",
									"    }",
									"});",
									"",
									"pm.test('Cascading filters applied correctly', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.province_code).to.equal(10);",
									"    pm.expect(jsonData.data.district_code).to.equal(1003);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/dropdown/sub-districts?province_code=10&district_code=1003",
							"host": ["{{base_url}}"],
							"path": ["admin", "dropdown", "sub-districts"],
							"query": [
								{"key": "province_code", "value": "10", "description": "Bangkok province code"},
								{"key": "district_code", "value": "1003", "description": "Pathum Wan district code"}
							]
						}
					}
				},
				{
					"name": "Provinces Dropdown - Include All Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('All provinces retrieved including inactive/deleted', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.filters_applied.include_inactive).to.be.true;",
									"    pm.expect(jsonData.data.filters_applied.include_deleted).to.be.true;",
									"    console.log('Total provinces (including inactive/deleted):', jsonData.data.total);",
									"});",
									"",
									"pm.test('May include inactive provinces', function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.provinces && jsonData.data.provinces.length > 0) {",
									"        const hasInactive = jsonData.data.provinces.some(p => p.is_active === false);",
									"        if (hasInactive) {",
									"            console.log('Found inactive provinces in results');",
									"        } else {",
									"            console.log('No inactive provinces found (all are active)');",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/dropdown/provinces?include_inactive=true&include_deleted=true&limit=100",
							"host": ["{{base_url}}"],
							"path": ["admin", "dropdown", "provinces"],
							"query": [
								{"key": "include_inactive", "value": "true", "description": "Include inactive provinces"},
								{"key": "include_deleted", "value": "true", "description": "Include deleted provinces"},
								{"key": "limit", "value": "100", "description": "Get all provinces"}
							]
						}
					}
				}
			],
			"description": "Optimized dropdown endpoints for frontend forms with lightweight responses, flexible filtering, and cascading geographic selection. These endpoints are specifically designed for UI dropdowns with minimal data transfer and enhanced user experience."
		},
		{
			"name": "Admin Panel",
			"item": [
				{
					"name": "Dashboard Analytics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/analytics",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"analytics"
							]
						}
					}
				},
				{
					"name": "Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/audit-log?limit=50&skip=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"audit-log"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "resource_type",
									"value": "",
									"disabled": true
								},
								{
									"key": "user_id",
									"value": "",
									"disabled": true
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Device API Endpoints",
			"item": [
				{
					"name": "AVA4 Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/ava4/devices?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ava4",
								"devices"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Kati Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/kati/devices?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"kati",
								"devices"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Qube-Vital Devices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/qube-vital/devices?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"qube-vital",
								"devices"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Submit AVA4 Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"timestamp\": \"2024-01-15T10:30:00Z\",\n    \"device_id\": \"AA:BB:CC:DD:EE:FF\",\n    \"type\": \"BLOOD_PRESSURE\",\n    \"data\": {\n        \"systolic\": 120,\n        \"diastolic\": 80,\n        \"pulse\": 72,\n        \"value\": 120,\n        \"unit\": \"mmHg\",\n        \"unit_code\": \"mm[Hg]\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/ava4/data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ava4",
								"data"
							]
						}
					}
				},
				{
					"name": "Get AVA4 Raw Patient Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('AVA4 raw patient documents retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('raw_documents');",
									"    pm.expect(jsonData.data).to.have.property('field_analysis');",
									"    pm.expect(jsonData.data).to.have.property('standard_patient_fields');",
									"    console.log('Total patient documents:', jsonData.data.total_count);",
									"    console.log('Standard patient fields:', jsonData.data.standard_patient_fields.length);",
									"    console.log('AVA4 integration fields found');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/ava4/patients/raw-documents?limit=5&skip=0&include_deleted=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ava4",
								"patients",
								"raw-documents"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Number of raw documents to return (1-50)"
								},
								{
									"key": "skip",
									"value": "0",
									"description": "Number of documents to skip"
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true,
									"description": "Filter by specific patient ID"
								},
								{
									"key": "include_deleted",
									"value": "false",
									"description": "Include soft-deleted patients"
								}
							]
						}
					}
				},
				{
					"name": "Get AVA4 Raw Sub-Device Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('AVA4 raw sub-device documents retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.data).to.have.property('raw_documents');",
									"    console.log('Data type:', jsonData.data.metadata.data_type);",
									"    console.log('Total documents:', jsonData.data.total_count);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/ava4/sub-devices/raw-documents?limit=5&data_type=devices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ava4",
								"sub-devices",
								"raw-documents"
							],
							"query": [
								{
									"key": "limit",
									"value": "5",
									"description": "Number of raw documents to return"
								},
								{
									"key": "skip",
									"value": "0",
									"disabled": true,
									"description": "Number of documents to skip"
								},
								{
									"key": "patient_id",
									"value": "",
									"disabled": true,
									"description": "Filter by specific patient ID"
								},
								{
									"key": "data_type",
									"value": "devices",
									"description": "Type of data: 'devices' or 'patients'"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "System Health",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					}
				},
				{
					"name": "Root Endpoint",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Realtime Events & WebSocket",
			"item": [
				{
					"name": "Get Realtime Events (SSE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Realtime events endpoint accessible', function () {",
									"    pm.response.to.have.status(200);",
									"    console.log('Realtime events SSE endpoint connected');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/realtime/events",
							"host": ["{{base_url}}"],
							"path": ["realtime", "events"]
						}
					}
				},
				{
					"name": "Get Patient Realtime Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Patient realtime events accessible', function () {",
									"    pm.response.to.have.status(200);",
									"    console.log('Patient SSE endpoint connected for:', pm.environment.get('patient_id'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/realtime/events/patient/{{patient_id}}",
							"host": ["{{base_url}}"],
							"path": ["realtime", "events", "patient", "{{patient_id}}"]
						}
					}
				},
				{
					"name": "Get Hospital Realtime Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Hospital realtime events accessible', function () {",
									"    pm.response.to.have.status(200);",
									"    console.log('Hospital SSE endpoint connected for:', pm.environment.get('hospital_id'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/realtime/events/hospital/{{hospital_id}}",
							"host": ["{{base_url}}"],
							"path": ["realtime", "events", "hospital", "{{hospital_id}}"]
						}
					}
				},
				{
					"name": "Get WebSocket Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('WebSocket statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    console.log('WebSocket stats:', jsonData.data.stats);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/realtime/stats",
							"host": ["{{base_url}}"],
							"path": ["realtime", "stats"]
						}
					}
				},
				{
					"name": "Test Publish Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Test event published successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log('Test event published:', jsonData.message);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"event_type\": \"test\", \"data\": {\"message\": \"Test realtime event\", \"timestamp\": \"2024-01-15T10:30:00Z\"}}"
						},
						"url": {
							"raw": "{{base_url}}/realtime/test/publish",
							"host": ["{{base_url}}"],
							"path": ["realtime", "test", "publish"]
						}
					}
				}
			],
			"description": "Real-time event streaming and WebSocket endpoints for live patient monitoring, hospital events, and device status updates"
		},
		{
			"name": "Reports Management",
			"item": [
				{
					"name": "Create Report Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Report template created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('template_id');",
									"    pm.environment.set('template_id', jsonData.data.template_id);",
									"    console.log('Template created with ID:', jsonData.data.template_id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Patient Summary Report\", \"description\": \"Comprehensive patient health summary\", \"type\": \"patient\", \"fields\": [\"vitals\", \"medications\", \"appointments\"], \"format\": \"pdf\"}"
						},
						"url": {
							"raw": "{{base_url}}/reports/templates",
							"host": ["{{base_url}}"],
							"path": ["reports", "templates"]
						}
					}
				},
				{
					"name": "List Report Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Report templates listed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('templates');",
									"    console.log('Found templates:', jsonData.data.total);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reports/templates?limit=50",
							"host": ["{{base_url}}"],
							"path": ["reports", "templates"],
							"query": [
								{"key": "limit", "value": "50"}
							]
						}
					}
				},
				{
					"name": "Generate Report",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Report generation initiated successfully', function () {",
									"    pm.response.to.have.status(202);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('job_id');",
									"    pm.environment.set('job_id', jsonData.data.job_id);",
									"    console.log('Report job started:', jsonData.data.job_id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"patient_id\": \"{{patient_id}}\", \"date_range\": {\"start\": \"2024-01-01\", \"end\": \"2024-01-31\"}, \"include_charts\": true}"
						},
						"url": {
							"raw": "{{base_url}}/reports/generate/{{template_id}}",
							"host": ["{{base_url}}"],
							"path": ["reports", "generate", "{{template_id}}"]
						}
					}
				},
				{
					"name": "Get Report Job Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Report job status retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('job');",
									"    console.log('Job status:', jsonData.data.job.status);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/reports/jobs/{{job_id}}",
							"host": ["{{base_url}}"],
							"path": ["reports", "jobs", "{{job_id}}"]
						}
					}
				}
			],
			"description": "Comprehensive report management system for creating templates, generating reports, and managing report jobs"
		},
		{
			"name": "Data Visualization",
			"item": [
				{
					"name": "Get Patient Demographics Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Patient demographics chart generated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('chart');",
									"    console.log('Demographics chart generated');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/visualization/charts/patient-demographics",
							"host": ["{{base_url}}"],
							"path": ["visualization", "charts", "patient-demographics"]
						}
					}
				},
				{
					"name": "Get Vital Trends Chart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Vital trends chart generated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('chart');",
									"    console.log('Vital trends chart for patient:', pm.environment.get('patient_id'));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/visualization/charts/vital-trends/{{patient_id}}",
							"host": ["{{base_url}}"],
							"path": ["visualization", "charts", "vital-trends", "{{patient_id}}"]
						}
					}
				},
				{
					"name": "Get System Overview Charts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('System overview charts generated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('charts');",
									"    console.log('System overview charts generated');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/visualization/charts/system-overview",
							"host": ["{{base_url}}"],
							"path": ["visualization", "charts", "system-overview"]
						}
					}
				}
			],
			"description": "Data visualization endpoints for generating charts, graphs, and visual representations of patient data and system metrics"
		},
		{
			"name": "Performance Monitoring",
			"item": [
				{
					"name": "Get Cache Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cache statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    console.log('Cache stats:', jsonData.data.stats);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/performance/cache/stats",
							"host": ["{{base_url}}"],
							"path": ["admin", "performance", "cache", "stats"]
						}
					}
				},
				{
					"name": "Clear Cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Cache cleared successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    console.log('Cache cleared:', jsonData.message);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"cache_type\": \"all\"}"
						},
						"url": {
							"raw": "{{base_url}}/admin/performance/cache/clear",
							"host": ["{{base_url}}"],
							"path": ["admin", "performance", "cache", "clear"]
						}
					}
				},
				{
					"name": "Get Database Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Database statistics retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('stats');",
									"    console.log('Database stats:', jsonData.data.stats);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/performance/database/stats",
							"host": ["{{base_url}}"],
							"path": ["admin", "performance", "database", "stats"]
						}
					}
				}
			],
			"description": "Performance monitoring and optimization endpoints for cache management and database statistics"
		},
		{
			"name": "Security Management",
			"item": [
				{
					"name": "Get Security Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Security events retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('events');",
									"    console.log('Security events found:', jsonData.data.total);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/security/audit/events?limit=20",
							"host": ["{{base_url}}"],
							"path": ["admin", "security", "audit", "events"],
							"query": [
								{"key": "limit", "value": "20"}
							]
						}
					}
				},
				{
					"name": "Get Security Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Security summary retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('summary');",
									"    console.log('Security summary:', jsonData.data.summary);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/security/audit/summary",
							"host": ["{{base_url}}"],
							"path": ["admin", "security", "audit", "summary"]
						}
					}
				},
				{
					"name": "Get Active Alerts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Active alerts retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('alerts');",
									"    console.log('Active alerts:', jsonData.data.total);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/security/alerts/active",
							"host": ["{{base_url}}"],
							"path": ["admin", "security", "alerts", "active"]
						}
					}
				},
				{
					"name": "Generate API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('API key generated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('api_key');",
									"    console.log('API key generated');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Test API Key\", \"permissions\": [\"read\"], \"expires_in\": \"30d\"}"
						},
						"url": {
							"raw": "{{base_url}}/admin/security/encryption/generate-api-key",
							"host": ["{{base_url}}"],
							"path": ["admin", "security", "encryption", "generate-api-key"]
						}
					}
				}
			],
			"description": "Security management endpoints for audit events, alerts, and encryption key management"
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5054",
			"type": "string"
		},
		{
			"key": "username",
			"value": "operapanel",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Sim!443355",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "patient_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "device_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "hospital_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "template_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "job_id",
			"value": "",
			"type": "string"
		}
	]
} 