services:
  # Main FastAPI application (existing)
  stardust-api:
    build: .
    container_name: stardust-my-firstcare-com
    ports:
      - "5054:5054"
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://opera_admin:Sim!443355@coruscant.my-firstcare.com:27023/admin?ssl=true&authSource=admin
      - MONGODB_HOST=coruscant.my-firstcare.com
      - MONGODB_PORT=27023
      - MONGODB_USERNAME=opera_admin
      - MONGODB_PASSWORD=Sim!443355
      - MONGODB_AUTH_DB=admin
      - MONGODB_SSL=true
      - MONGODB_MAIN_DB=AMY
      - MONGODB_FHIR_DB=MFC_FHIR_R5
      - JWT_AUTH_BASE_URL=https://stardust-v1.my-firstcare.com
      - ENABLE_JWT_AUTH=true
      - DEBUG=false
      - DEV_MODE=false
      - PORT=5054
      - HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6374/0
      - ENABLE_CACHE=true
      - ENCRYPTION_MASTER_KEY=mg409-8dtxc4WOTPr0Q0VYSDhIVFaTVcqYGxfchBUJw=
      - FHIR_QUEUE_NAME=fhir_processing_queue
      - ENABLE_ASYNC_FHIR=true
    volumes:
      - ./logs:/app/logs
      - ./ssl:/app/ssl:ro
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5054/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stardust-network

  # FHIR R5 Data Parser Service
  fhir-parser:
    build:
      context: .
      dockerfile: Dockerfile.fhir-parser
    container_name: stardust-fhir-parser
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://opera_admin:Sim!443355@coruscant.my-firstcare.com:27023/admin?ssl=true&authSource=admin
      - MONGODB_HOST=coruscant.my-firstcare.com
      - MONGODB_PORT=27023
      - MONGODB_USERNAME=opera_admin
      - MONGODB_PASSWORD=Sim!443355
      - MONGODB_AUTH_DB=admin
      - MONGODB_SSL=true
      - MONGODB_MAIN_DB=AMY
      - MONGODB_FHIR_DB=MFC_FHIR_R5
      - REDIS_URL=redis://redis:6374/0
      - LOG_LEVEL=INFO
      - FHIR_QUEUE_NAME=fhir_processing_queue
      - FHIR_BATCH_SIZE=10
      - FHIR_WORKER_THREADS=4
      - ENABLE_LEGACY_ROUTING=true
    volumes:
      - ./logs:/app/logs
      - ./ssl:/app/ssl:ro
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6374); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - stardust-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"

  # FHIR R5 Migration Service  
  fhir-migrator:
    build:
      context: .
      dockerfile: Dockerfile.fhir-migrator
    container_name: stardust-fhir-migrator
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://opera_admin:Sim!443355@coruscant.my-firstcare.com:27023/admin?ssl=true&authSource=admin
      - MONGODB_HOST=coruscant.my-firstcare.com
      - MONGODB_PORT=27023
      - MONGODB_USERNAME=opera_admin
      - MONGODB_PASSWORD=Sim!443355
      - MONGODB_AUTH_DB=admin
      - MONGODB_SSL=true
      - MONGODB_MAIN_DB=AMY
      - MONGODB_FHIR_DB=MFC_FHIR_R5
      - LOG_LEVEL=INFO
      - MIGRATION_BATCH_SIZE=50
      - AUTO_START_MIGRATION=false
    volumes:
      - ./logs:/app/logs
      - ./ssl:/app/ssl:ro
    restart: "no"  # Run only when needed
    depends_on:
      - redis
    networks:
      - stardust-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"

  # Redis for queuing and caching
  redis:
    image: redis:7-alpine
    container_name: stardust-redis
    command: redis-server --port 6374 --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - "6374:6374"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - stardust-network
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6374", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  stardust-network:
    driver: bridge

volumes:
  redis-data:
    driver: local 