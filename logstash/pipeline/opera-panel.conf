input {
  beats {
    port => 5044
  }
  
  file {
    path => "/usr/share/logstash/logs/*.json"
    start_position => "beginning"
    codec => json
    tags => ["opera-panel", "file-input"]
  }
}

filter {
  # Parse timestamp if it exists
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Add geographic information for IP addresses
  if [client_ip] and [client_ip] != "unknown" {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Categorize log levels
  if [level] {
    mutate {
      add_field => { "log_severity" => "%{level}" }
    }
    
    if [level] == "ERROR" or [level] == "CRITICAL" {
      mutate {
        add_tag => ["high-priority"]
      }
    }
    
    if [level] == "WARNING" {
      mutate {
        add_tag => ["medium-priority"]
      }
    }
  }
  
  # Categorize event types
  if [event_type] {
    if [event_type] == "http_request" or [event_type] == "http_response" {
      mutate {
        add_tag => ["http-traffic"]
      }
    }
    
    if [event_type] == "security_event" or [event_type] == "security_violation" {
      mutate {
        add_tag => ["security"]
      }
    }
    
    if [event_type] == "database_performance" or [event_type] == "endpoint_performance" {
      mutate {
        add_tag => ["performance"]
      }
    }
    
    if [event_type] == "authentication" or [event_type] == "authorization" {
      mutate {
        add_tag => ["auth"]
      }
    }
  }
  
  # Extract user agent information
  if [user_agent] {
    useragent {
      source => "user_agent"
      target => "ua"
    }
  }
  
  # Performance metrics enrichment
  if [duration_ms] {
    ruby {
      code => "
        duration = event.get('duration_ms')
        if duration
          if duration > 5000
            event.set('performance_category', 'very-slow')
          elsif duration > 2000
            event.set('performance_category', 'slow')
          elsif duration > 1000
            event.set('performance_category', 'moderate')
          else
            event.set('performance_category', 'fast')
          end
        end
      "
    }
  }
  
  # HTTP status code categorization
  if [status_code] {
    if [status_code] >= 500 {
      mutate {
        add_field => { "http_category" => "server-error" }
        add_tag => ["error"]
      }
    } else if [status_code] >= 400 {
      mutate {
        add_field => { "http_category" => "client-error" }
        add_tag => ["client-error"]
      }
    } else if [status_code] >= 300 {
      mutate {
        add_field => { "http_category" => "redirect" }
      }
    } else if [status_code] >= 200 {
      mutate {
        add_field => { "http_category" => "success" }
      }
    }
  }
  
  # Security event enrichment
  if "security" in [tags] {
    if [security_events] {
      ruby {
        code => "
          events = event.get('security_events')
          if events.is_a?(Array)
            event.set('security_event_count', events.length)
            event.set('security_event_types', events.join(', '))
          end
        "
      }
    }
  }
  
  # Error enrichment
  if [error_type] {
    mutate {
      add_field => { "has_error" => "true" }
    }
    
    # Common error categorization
    if [error_type] =~ /Connection/ {
      mutate {
        add_field => { "error_category" => "connection" }
      }
    } else if [error_type] =~ /Validation/ {
      mutate {
        add_field => { "error_category" => "validation" }
      }
    } else if [error_type] =~ /Authentication/ {
      mutate {
        add_field => { "error_category" => "auth" }
      }
    } else if [error_type] =~ /Database/ {
      mutate {
        add_field => { "error_category" => "database" }
      }
    } else {
      mutate {
        add_field => { "error_category" => "other" }
      }
    }
  }
  
  # Add environment information
  mutate {
    add_field => { "environment" => "production" }
    add_field => { "service_name" => "opera-panel" }
    add_field => { "log_processed_at" => "%{@timestamp}" }
  }
  
  # Clean up unwanted fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "log", "input" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "opera-panel-processed-%{+YYYY.MM.dd}"
    template_name => "opera-panel-processed"
    template => "/usr/share/logstash/templates/opera-panel-template.json"
    template_overwrite => true
  }
  
  # Output high-priority logs to separate index
  if "high-priority" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "opera-panel-alerts-%{+YYYY.MM.dd}"
    }
  }
  
  # Output security events to separate index
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "opera-panel-security-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (remove in production)
  if [level] == "DEBUG" {
    stdout { 
      codec => rubydebug 
    }
  }
} 