{
	"info": {
		"_postman_id": "updated-2025-opera-panel-api-auth",
		"name": "My FirstCare Opera Panel API - Complete Auth System",
		"description": "Complete API collection for My FirstCare Opera Panel with comprehensive authentication system including all Stardust-V1 endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-login if no token exists",
					"if (!pm.environment.get('jwt_token') || pm.environment.get('jwt_token') === '') {",
					"    console.log('No JWT token found, attempting auto-login...');",
					"    pm.sendRequest({",
					"        url: pm.environment.get('base_url') + '/auth/login',",
					"        method: 'POST',",
					"        header: {'Content-Type': 'application/json'},",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({",
					"                username: pm.environment.get('username'),",
					"                password: pm.environment.get('password')",
					"            })",
					"        }",
					"    }, function (err, response) {",
					"        if (!err && response.code === 200) {",
					"            const jsonData = response.json();",
					"            pm.environment.set('jwt_token', jsonData.access_token);",
					"            console.log('Auto-login successful');",
					"        } else {",
					"            console.log('Auto-login failed:', err || response.code);",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Simple Login Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Simple login test successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql('Simple login endpoint working');",
									"    pm.expect(jsonData.status).to.eql('ok');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/simple-login",
							"host": ["{{base_url}}"],
							"path": ["auth", "simple-login"]
						}
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.environment.set('jwt_token', jsonData.access_token);",
									"    if (jsonData.refresh_token) {",
									"        pm.environment.set('refresh_token', jsonData.refresh_token);",
									"    }",
									"    console.log('JWT Token saved:', jsonData.access_token.substring(0, 20) + '...');",
									"});",
									"",
									"pm.test('Response time is less than 2000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logout successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('logged out');",
									"    // Clear tokens from environment",
									"    pm.environment.unset('jwt_token');",
									"    pm.environment.unset('refresh_token');",
									"    console.log('Logged out successfully, tokens cleared');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["auth", "logout"]
						}
					}
				},
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('registered successfully');",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    console.log('User registered:', jsonData.data.username);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser_{{$timestamp}}\",\n    \"password\": \"SecurePass123!\",\n    \"email\": \"newuser@example.com\",\n    \"full_name\": \"New Test User\",\n    \"phone\": \"+66-123-456-789\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "Get Available Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Roles retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('roles');",
									"    pm.expect(jsonData.data.roles).to.be.an('array');",
									"    pm.expect(jsonData.data.roles.length).to.be.greaterThan(0);",
									"    console.log('Available roles:', jsonData.data.roles.map(r => r.role).join(', '));",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/roles",
							"host": ["{{base_url}}"],
							"path": ["auth", "roles"]
						}
					}
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User info retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data).to.have.property('permissions');",
									"    pm.expect(jsonData.data).to.have.property('system_access');",
									"    console.log('Current user:', jsonData.data.username, 'Role:', jsonData.data.role);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["auth", "me"]
						}
					}
				},
				{
					"name": "Get Users List (Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Users list retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('users');",
									"    console.log('Users count:', jsonData.data.users ? jsonData.data.users.length : 0);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/users",
							"host": ["{{base_url}}"],
							"path": ["auth", "users"]
						}
					}
				},
				{
					"name": "Get Specific User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User details retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('username');",
									"    console.log('User details for:', jsonData.data.username);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/users/{{username}}",
							"host": ["{{base_url}}"],
							"path": ["auth", "users", "{{username}}"]
						}
					}
				},
				{
					"name": "Get Profile Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile photo response', function () {",
									"    if (pm.response.code === 200) {",
									"        pm.expect(pm.response.headers.get('content-type')).to.include('image/');",
									"        console.log('Profile photo retrieved successfully');",
									"    } else if (pm.response.code === 404) {",
									"        console.log('No profile photo found');",
									"    } else {",
									"        pm.expect.fail('Unexpected response code: ' + pm.response.code);",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/me/photo",
							"host": ["{{base_url}}"],
							"path": ["auth", "me", "photo"]
						}
					}
				},
				{
					"name": "Upload Profile Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Profile photo upload response', function () {",
									"    if (pm.response.code === 200) {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('filename');",
									"        console.log('Profile photo uploaded:', jsonData.data.filename);",
									"    } else {",
									"        console.log('Upload response:', pm.response.code, pm.response.text());",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/auth/me/photo",
							"host": ["{{base_url}}"],
							"path": ["auth", "me", "photo"]
						}
					}
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Token refreshed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.environment.set('jwt_token', jsonData.access_token);",
									"    console.log('Token refreshed successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/refresh",
							"host": ["{{base_url}}"],
							"path": ["auth", "refresh"]
						}
					}
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password reset email sent', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('reset email');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {"type": "noauth"},
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgot-password",
							"host": ["{{base_url}}"],
							"path": ["auth", "forgot-password"]
						}
					}
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Password reset successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('reset successfully');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {"type": "noauth"},
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"<reset_token>\",\n    \"new_password\": \"NewPass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/reset-password",
							"host": ["{{base_url}}"],
							"path": ["auth", "reset-password"]
						}
					}
				},
				{
					"name": "Submit Registration Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration request submitted successfully', function () {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('submitted successfully');",
									"    if (jsonData.data && jsonData.data.request_id) {",
									"        pm.environment.set('registration_request_id', jsonData.data.request_id);",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {"type": "noauth"},
						"method": "POST",
						"header": [
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"newuser_{{$timestamp}}\",\n    \"email\": \"newuser@example.com\",\n    \"full_name\": \"New User Request\",\n    \"phone\": \"+66-123-456-789\",\n    \"reason\": \"Need access for patient monitoring\",\n    \"organization\": \"My FirstCare Hospital\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register-request",
							"host": ["{{base_url}}"],
							"path": ["auth", "register-request"]
						}
					}
				},
				{
					"name": "Get Registration Requests (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration requests retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    console.log('Registration requests count:', jsonData.data.length);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{"key": "Authorization", "value": "Bearer {{jwt_token}}"}
						],
						"url": {
							"raw": "{{base_url}}/auth/registration-requests",
							"host": ["{{base_url}}"],
							"path": ["auth", "registration-requests"]
						}
					}
				},
				{
					"name": "Approve Registration Request (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration request approved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('approved');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{"key": "Authorization", "value": "Bearer {{jwt_token}}"},
							{"key": "Content-Type", "value": "application/json"}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"approved\": true,\n    \"notes\": \"Approved for patient monitoring access\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/registration-requests/{{registration_request_id}}/approve",
							"host": ["{{base_url}}"],
							"path": ["auth", "registration-requests", "{{registration_request_id}}", "approve"]
						}
					}
				},
				{
					"name": "Get Registration History (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Registration history retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    console.log('Registration history count:', jsonData.data.length);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{"key": "Authorization", "value": "Bearer {{jwt_token}}"}
						],
						"url": {
							"raw": "{{base_url}}/auth/registration-requests/history",
							"host": ["{{base_url}}"],
							"path": ["auth", "registration-requests", "history"]
						}
					}
				}
			]
		},
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Health check successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.status).to.eql('healthy');",
									"    pm.expect(jsonData.data.mongodb).to.eql('connected');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5054",
			"type": "string"
		},
		{
			"key": "username",
			"value": "admin",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Sim!443355",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	]
} 